
// ===== FRONT (WebApp) =====
const tg = window.Telegram.WebApp;
tg.ready(); tg.expand();

const user = tg.initDataUnsafe?.user;
const u = document.getElementById('user');
if (u) u.textContent = user ? `–ü—Ä–∏–≤—ñ—Ç, ${user.first_name}!` : '–ü—Ä–∏–≤—ñ—Ç!';

function setStatus(t){ const el = document.getElementById('buy-status'); if(el) el.textContent = t; }

// üëâ –ü–Ü–î–°–¢–ê–í–ò –°–í–Ü–ô –ë–ï–ö –ü–Ü–°–õ–Ø –î–ï–ü–õ–û–Æ (–ö—Ä–æ–∫ 3)
const BACKEND_URL = 'https://YOUR_BACKEND_HOST';

async function buyStars(sku, amountXTR){
  try {
    setStatus('–ì–æ—Ç—É—î–º–æ —ñ–Ω–≤–æ–π—Å‚Ä¶');
    const resp = await fetch(`${BACKEND_URL}/api/create-stars-invoice`, {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({
        initData: tg.initData || tg.initDataUnsafe,
        sku,
        amount: amountXTR
      })
    });
    const data = await resp.json();
    if(!resp.ok || !data.invoice_link) throw new Error(data.error || '–ù–µ–º–∞—î invoice_link');

    tg.openInvoice(data.invoice_link, (status) => {
      if (status === 'paid') setStatus('‚úÖ –û–ø–ª–∞—á–µ–Ω–æ!');
      else if (status === 'failed') setStatus('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏');
      else if (status === 'cancelled') setStatus('‚ùå –ü–ª–∞—Ç—ñ–∂ —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
      else setStatus('‚è≥ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è‚Ä¶');
    });
  } catch(e){
    setStatus('‚ùå ' + (e.message || '–ü–æ–º–∏–ª–∫–∞'));
  }
}

document.querySelectorAll('.buy').forEach(btn=>{
  btn.addEventListener('click', ()=>{
    const sku = btn.dataset.sku;
    const amount = parseInt(btn.dataset.amount,10);
    if(!sku || !amount) return setStatus('‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É');
    buyStars(sku, amount);
  });
});
